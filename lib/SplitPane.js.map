{"version":3,"sources":["SplitPane.js"],"names":["cx","SplitPane","props","onResizeStart","bind","onResizeEnd","onResize","state","resizing","children","getChildren","panes","componentWillReceiveProps","nextProps","setState","shouldComponentUpdate","nextState","componentWillUnmount","direction","toArray","filter","child","type","reduce","index","arr","push","length","delta","main","slice","call","childNodes","map","min","max","Number","MAX_VALUE","node","getBoundingClientRect","width","height","propName","a","b","aSize","bSize","total","Math","aNextSize","bNextSize","nextSizes","pane","i","nextGrow","getGrow","isChanged","some","grow","rest","basis","shrink","style","flexBasis","flexShrink","flexGrow","columnLengths","sum","factors","factor","rects","nextChildren","j","len","render","className","addVariants","addStates","build","displayName","defaultProps","propTypes","onResizeRestart","func","oneOf","isRequired","default","Pane","Spliter"],"mappings":"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","file":"SplitPane.js","sourcesContent":["/**\n * @file SplitPane\n * @author ludafa<ludafa@outlook.com>\n */\n\nimport React, {PropTypes, Component, Children, cloneElement} from 'react';\nimport {findDOMNode} from 'react-dom';\n\nimport {create} from 'melon-core/classname/cxBuilder';\nimport Pane from './Pane.js';\nimport Spliter from './Spliter.js';\nimport {limitInRange} from './util.js';\n\nconst cx = create('SplitPane');\n\n/**\n * melon 拆分窗格\n */\nclass SplitPane extends Component {\n\n    /**\n     * 构建函数\n     *\n     * @public\n     * @param {*} props 属性\n     */\n    constructor(props) {\n\n        super(props);\n\n        this.onResizeStart = this.onResizeStart.bind(this);\n        this.onResizeEnd = this.onResizeEnd.bind(this);\n        this.onResize = this.onResize.bind(this);\n\n        /**\n         * 状态\n         *\n         * @private\n         * @type {Object}\n         */\n        this.state = {\n            resizing: false,\n            children: this.getChildren(props)\n        };\n\n        /**\n         * 窗口容器\n         *\n         * 用于存放在拖拽过程中的数据\n         * 不放在 state 中的原因是这样可以提高性能\n         *\n         * @private\n         * @type {Array.Object}\n         */\n        this.panes = null;\n\n    }\n\n    /**\n     * 当组件接受新属性时的处理\n     *\n     * @public\n     * @param {Object} nextProps 新属性\n     */\n    componentWillReceiveProps(nextProps) {\n\n        // we do not repaint children while resizing\n        if (this.props.children !== nextProps.children && !this.state.resizing) {\n            this.setState({\n                children: this.getChildren(nextProps)\n            });\n        }\n\n    }\n\n    /**\n     * 是否需要更新\n     *\n     * 我们在 resize 的过程中不会进行 react 的更新\n     *\n     * @param {*} nextProps 下一个属性\n     * @param {*} nextState 下一个状态\n     * @return {boolean}\n     */\n    shouldComponentUpdate(nextProps, nextState) {\n        return !(this.state.resizing === nextState.resizing && nextState.resizing);\n    }\n\n    /**\n     * 当组件即将被销毁时的处理\n     *\n     * @public\n     */\n    componentWillUnmount() {\n        this.panes = null;\n    }\n\n    /**\n     * 获取内容\n     *\n     * @param {Object} props 属性\n     * @return {Array.Object}\n     */\n    getChildren(props) {\n\n        const direction = props.direction;\n\n        return Children\n            .toArray(props.children)\n            .filter(child => child.type === Pane)\n            .reduce((children, child, index, arr) => {\n\n                children.push(cloneElement(child, {direction}));\n\n                if (index < arr.length - 1) {\n                    children.push((\n                        <Spliter\n                            key={`spliter-${index}`}\n                            direction={direction}\n                            onResizeStart={this.onResizeStart}\n                            onResize={({delta}) => this.onResize(index, delta)}\n                            onResizeEnd={this.onResizeEnd} />\n                    ));\n                }\n\n                return children;\n\n            }, []);\n    }\n\n\n    /**\n     * 开始拖拽调整大小\n     *\n     * @private\n     */\n    onResizeStart() {\n\n        const main = findDOMNode(this);\n\n        this.setState({\n            resizing: true\n        });\n\n        const panes = [].slice.call(main.childNodes);\n\n        this.panes = this.state.children\n            .filter(child => child.type === Pane)\n            .map((child, index) => {\n\n                const {\n                    min = 0,\n                    max = Number.MAX_VALUE\n                } = child.props;\n\n                const node = panes[index * 2];\n\n                const {\n                    width,\n                    height\n                } = node.getBoundingClientRect();\n\n                return {\n                    width,\n                    height,\n                    max,\n                    min,\n                    node\n                };\n\n            });\n\n        const onResizeStart = this.props.onResizeStart;\n\n        if (onResizeStart) {\n            onResizeStart();\n        }\n\n    }\n\n    /**\n     * 调整大小\n     *\n     * @private\n     * @param {number} index  当前的 spliter 序号\n     * @param {number} delta  拖动位移\n     */\n    onResize(index, delta) {\n\n        const {\n            direction,\n            onResize\n        } = this.props;\n\n        const propName = direction === 'horizontal' ? 'width' : 'height';\n\n        let panes = this.panes;\n\n        const a = panes[index];\n        const b = panes[index + 1];\n        const aSize = a[propName];\n        const bSize = b[propName];\n        const total = aSize + bSize;\n        const min = Math.max(a.min, total - b.max);\n        const max = Math.min(a.max, total - b.min);\n        const aNextSize = limitInRange(aSize + delta, min, max);\n        const bNextSize = total - aNextSize;\n\n        const nextSizes = panes.map((pane, i) => {\n\n            if (pane === a) {\n                return aNextSize;\n            }\n\n            if (pane === b) {\n                return bNextSize;\n            }\n\n            return pane[propName];\n\n        });\n\n        const nextGrow = this.getGrow(nextSizes);\n\n        const isChanged = nextGrow.some((grow, index) => panes[index].grow !== grow);\n\n        if (!isChanged) {\n            return;\n        }\n\n        panes = this.panes = panes.map((pane, i) => {\n\n            const {\n                node,\n                ...rest\n            } = pane;\n\n            const basis = 0;\n            const shrink = 0;\n            const grow = nextGrow[i];\n\n            node.style.flexBasis = basis;\n            node.style.flexShrink = shrink;\n            node.style.flexGrow = grow;\n\n            return {\n                ...rest,\n                node,\n                basis,\n                shrink,\n                grow\n            };\n\n        });\n\n        if (onResize) {\n            onResize(panes.map(pane => {\n                return {\n                    grow: pane.grow,\n                    basis: 0,\n                    shrink: 0\n                };\n            }));\n        }\n\n    }\n\n    /**\n     * get grow factor for columns\n     *\n     * @param {Array.number} columnLengths array of comlumn length\n     * @return {Array.number}\n     */\n    getGrow(columnLengths) {\n\n        const sum = columnLengths.reduce((sum, length) => sum + length, 0);\n\n        const factors = columnLengths.map(length => length / sum);\n\n        const min = Math.min(...factors);\n\n        return factors.map(factor => factor / min);\n\n    }\n\n    /**\n     * 当结束拖拽时的处理\n     *\n     * @private\n     */\n    onResizeEnd() {\n\n        const onResizeEnd = this.props.onResizeEnd;\n\n        let panes = this.panes;\n\n        const rects = panes.map(pane => {\n\n            const {\n                basis,\n                grow,\n                shrink\n            } = pane;\n\n            return {\n                grow,\n                shrink,\n                basis\n            };\n\n        });\n\n        let children = this.state.children;\n        let nextChildren = [];\n\n        for (let i = 0, j = 0, len = children.length; i < len; i++) {\n\n            let child = children[i];\n\n            if (child.type === Pane) {\n                child = cloneElement(child, rects[j++]);\n            }\n\n            nextChildren.push(child);\n\n        }\n\n        this.setState({\n            resizing: false,\n            children: nextChildren\n        });\n\n        if (onResizeEnd) {\n            onResizeEnd({rects});\n        }\n\n        this.panes = null;\n\n    }\n\n    /**\n     * 渲染\n     *\n     * @public\n     * @return {React.Element}\n     */\n    render() {\n\n        const {\n            direction,\n            ...rest\n        } = this.props;\n\n        const {\n            resizing,\n            children\n        } = this.state;\n\n        const className = cx(this.props)\n            .addVariants(direction)\n            .addStates({\n                resizing\n            })\n            .build();\n\n        return (\n            <div {...rest} className={className}>\n                {children}\n            </div>\n        );\n    }\n\n}\n\nSplitPane.displayName = 'SplitPane';\n\nSplitPane.defaultProps = {\n    direction: 'horizontal'\n};\n\nSplitPane.propTypes = {\n    onResizeRestart: PropTypes.func,\n    onResize: PropTypes.func,\n    onResizeEnd: PropTypes.func,\n    direction: PropTypes.oneOf(['horizontal', 'vertical']).isRequired\n};\n\n/* eslint-disable fecs-export-on-declare */\nexport {\n    SplitPane as default,\n    Pane,\n    Spliter,\n    SplitPane\n};\n/* eslint-enable fecs-export-on-declare */\n"]}